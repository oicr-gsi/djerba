#! /usr/bin/env python3

"""
Standalone script to upload an existing config file to an Elba server

Config may have been generated by Djerba, or otherwise
"""

import argparse
import json
import logging
import os
import sys

sys.path.pop(0) # do not import from script directory
from djerba.report import uploader
from djerba.utilities import constants

def get_parser():
    """Construct the parser for command-line arguments"""

    default_database = "cgi_report"
    default_port = "8080"
    default_server = "couchdb-dev.gsi.oicr.on.ca"
    env_vars = (constants.ELBA_DB_USER, constants.ELBA_DB_PASSWORD)
    epilog_str = "Environment variables %s and %s " % env_vars +\
               "must respectively be set to "+\
               "the username and password for Elba database access."
    
    parser = argparse.ArgumentParser(
        description='upload: Upload an Elba config file to a server',
        epilog=epilog_str
    )
    parser.add_argument(
        '--config',
        metavar='PATH',
        help='Path to input file with Elba config, or - for STDIN',
        required=True
    )
    parser.add_argument(
        '--database',
        default=default_database,
        metavar='NAME',
        help="Name of Elba database to update. Default: %s" % default_database
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help="Log the configuration and validate inputs, then stop before uploading to the server"
    )
    parser.add_argument('--debug', action='store_true', help="Highly verbose logging")
    parser.add_argument(
        '--log-path',
        metavar='PATH',
        help='Path of file where log output will be appended. Optional, defaults to STDERR.'
    )
    parser.add_argument(
        '--schema',
        metavar='PATH',
        help="Path to JSON schema for validating Elba output. Optional."
    )
    parser.add_argument(
        '--port',
        metavar='NUM',
        default=default_port,
        help="Port number for Elba server. Default: %s" % default_port,
    )
    parser.add_argument(
        '--report-id',
        metavar='ID',
        help='ID string for Elba database. Optional. If not given, will be '+\
        'automatically generated by the Elba server.'
    )
    parser.add_argument(
        '--server',
        metavar='ADDRESS',
        default=default_server,
        help="Address of Elba server (without http:// prefix). Default: %s" % default_server
    )
    parser.add_argument('--verbose', action='store_true', help="Moderately verbose logging")
    return parser

def main(args):
    """Main method to run script"""
    if args.config == '-':
        elba_config = json.loads(sys.stdin.read())
    else:
        if not os.access(args.config, os.R_OK):
            print("Cannot read input path '%s'" % args.config, file=sys.stderr)
            sys.exit(1)
        with open(args.config) as in_file:
            elba_config = json.loads(in_file.read())
    if args.debug:
        log_level = logging.DEBUG
    elif args.verbose:
        log_level = logging.INFO
    else:
        log_level = logging.ERROR
    ul = uploader(args.schema, log_level, args.log_path)
    ul.validate(elba_config)
    upload_config = {
        ul.DB_NAME_KEY: args.database,
        ul.DB_PORT_KEY: args.port,
        ul.DB_URL_KEY: args.server
    }
    if args.dry_run:
        ul.logger.info("Config from calling script upload.py: "+json.dumps(upload_config, sort_keys=True))
        ul.logger.info("Dry-run mode; not proceeding with upload")
        sys.exit(0)
    else:
        ul.upload(elba_config, upload_config, args.report_id)

if __name__ == '__main__':
    parser = get_parser()
    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)
    main(parser.parse_args())
